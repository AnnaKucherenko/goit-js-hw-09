{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","delayEl","addEventListener","onFormSubmit","position","delay","evt","preventDefault","formElements","currentTarget","elements","valueDelay","value","valueStep","step","valueAmount","amount","i","Number","console","log","createPromise","then","result","catch","error","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,SAC9BC,EAAUF,SAASC,cAAc,uBACvCF,EAAKI,iBAAiB,SAAUC,GAEhC,IAAIC,EAAW,EACXC,EAAQ,EAEZ,SAASF,EAAaG,GACpBA,EAAIC,iBACEC,MAAAA,EAAeF,EAAIG,cAAcC,SAEjCC,EAAaH,EAAaH,MAAMO,MAChCC,EAAYL,EAAaM,KAAKF,MAC9BG,EAAcP,EAAaQ,OAAOJ,MAEnC,IAAA,IAAIK,EAAI,EAAGA,GAAKF,EAAaE,GAAK,EAEpB,KADjBb,GAAY,KAEVC,GAASa,OAAOP,IAEdP,GAAY,IACdC,GAASa,OAAOL,IAElBM,QAAQC,IAAIhB,EAAUC,GACtBgB,EAAcjB,EAAUC,GACrBiB,KAAKC,IAAYJ,QAAQC,IAAIG,KAC7BC,MAAOC,IAAWN,QAAQC,IAAIK,KAIrC,SAASJ,EAAcjB,EAAUC,GACxB,OAAA,IAAIqB,QAAS,CAACC,EAASC,KACtBC,MAAAA,EAAgBC,KAAKC,SAAW,GACtCC,WAAW,KACLH,EACFF,yBAA+BvB,QAAeC,OAE9CuB,wBAA6BxB,QAAeC,QAG7CA","file":"03-promises.be7779fb.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('.form');\nconst delayEl = document.querySelector('input[name=\"delay\"]');\nform.addEventListener('submit', onFormSubmit);\n\nlet position = 0;\nlet delay = 0;\n  \nfunction onFormSubmit(evt){\n  evt.preventDefault();\n  const formElements = evt.currentTarget.elements;\n\n  const valueDelay = formElements.delay.value;\n  const valueStep = formElements.step.value;\n  const valueAmount = formElements.amount.value;\n    \n  for (let i = 1; i <= valueAmount; i += 1) {\n    position += 1;\n    if (position === 1) {\n      delay += Number(valueDelay);\n    }\n    if (position >= 2) {\n      delay += Number(valueStep);\n    }\n    console.log(position, delay);\n    createPromise(position, delay)\n      .then(result => { console.log(result); })\n      .catch (error => { console.log(error); });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise ((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`)\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n      \n    }, delay);\n  });\n  \n}\n\n"]}